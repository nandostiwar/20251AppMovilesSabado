{"ast":null,"code":"// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './EmailForm.css';\n\n// const EmailForm = ({ showNotification }) => {\n//   const [formData, setFormData] = useState({\n//     from: '',  // Añadido campo remitente\n//     to: '',\n//     subject: '',\n//     message: '',\n//   });\n//   const [loading, setLoading] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validar formulario\n//     if (!formData.from || !formData.to || !formData.subject || !formData.message) {\n//       showNotification('Todos los campos son requeridos', 'error');\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     try {\n//       // Usar una URL de API con fallback por si la variable de entorno no está definida\n//       const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n//       console.log('URL de la API:', apiUrl);\n\n//       const response = await axios.post(\n//         `${apiUrl}/send-email`,\n//         formData\n//       );\n\n//       if (response.data.success) {\n//         showNotification('Email enviado correctamente!', 'success');\n//         // Limpiar formulario\n//         setFormData({ from: '', to: '', subject: '', message: '' });\n//       } else {\n//         showNotification('Error al enviar el email', 'error');\n//       }\n//     } catch (error) {\n//       console.error('Error detallado:', error);\n\n//       // Mostrar mensaje de error más específico\n//       let errorMessage = 'Error al conectar con el servidor';\n\n//       if (error.response) {\n//         // El servidor respondió con un código de estado fuera del rango de 2xx\n//         console.error('Respuesta de error:', error.response.data);\n//         errorMessage = error.response.data.message || \n//                        `Error ${error.response.status}: ${error.response.statusText}`;\n//       } else if (error.request) {\n//         // La solicitud se realizó pero no se recibió respuesta\n//         errorMessage = 'No se recibió respuesta del servidor';\n//       }\n\n//       showNotification(errorMessage, 'error');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"email-form-container\">\n//       <h2>Nuevo correo</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"form-group\">\n//           <label htmlFor=\"from\">Remitente:</label>\n//           <input\n//             type=\"email\"\n//             id=\"from\"\n//             name=\"from\"\n//             value={formData.from}\n//             onChange={handleChange}\n//             placeholder=\"tu@correo.com\"\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label htmlFor=\"to\">Destinatario:</label>\n//           <input\n//             type=\"email\"\n//             id=\"to\"\n//             name=\"to\"\n//             value={formData.to}\n//             onChange={handleChange}\n//             placeholder=\"correo@ejemplo.com\"\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label htmlFor=\"subject\">Asunto:</label>\n//           <input\n//             type=\"text\"\n//             id=\"subject\"\n//             name=\"subject\"\n//             value={formData.subject}\n//             onChange={handleChange}\n//             placeholder=\"Asunto del correo\"\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label htmlFor=\"message\">Mensaje:</label>\n//           <textarea\n//             id=\"message\"\n//             name=\"message\"\n//             value={formData.message}\n//             onChange={handleChange}\n//             placeholder=\"Escribe tu mensaje aquí\"\n//             rows=\"6\"\n//           />\n//         </div>\n\n//         <button \n//           type=\"submit\" \n//           className=\"send-button\" \n//           disabled={loading}\n//         >\n//           {loading ? 'Enviando...' : 'Enviar correo'}\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default EmailForm;","map":{"version":3,"names":[],"sources":["C:/Users/Leandro/Desktop/AppSabados/20251AppMovilesSabado/solo2/frontend/src/components/EmailForm.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './EmailForm.css';\r\n\r\n// const EmailForm = ({ showNotification }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     from: '',  // Añadido campo remitente\r\n//     to: '',\r\n//     subject: '',\r\n//     message: '',\r\n//   });\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n    \r\n//     // Validar formulario\r\n//     if (!formData.from || !formData.to || !formData.subject || !formData.message) {\r\n//       showNotification('Todos los campos son requeridos', 'error');\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n\r\n//     try {\r\n//       // Usar una URL de API con fallback por si la variable de entorno no está definida\r\n//       const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n//       console.log('URL de la API:', apiUrl);\r\n      \r\n//       const response = await axios.post(\r\n//         `${apiUrl}/send-email`,\r\n//         formData\r\n//       );\r\n      \r\n//       if (response.data.success) {\r\n//         showNotification('Email enviado correctamente!', 'success');\r\n//         // Limpiar formulario\r\n//         setFormData({ from: '', to: '', subject: '', message: '' });\r\n//       } else {\r\n//         showNotification('Error al enviar el email', 'error');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error detallado:', error);\r\n      \r\n//       // Mostrar mensaje de error más específico\r\n//       let errorMessage = 'Error al conectar con el servidor';\r\n      \r\n//       if (error.response) {\r\n//         // El servidor respondió con un código de estado fuera del rango de 2xx\r\n//         console.error('Respuesta de error:', error.response.data);\r\n//         errorMessage = error.response.data.message || \r\n//                        `Error ${error.response.status}: ${error.response.statusText}`;\r\n//       } else if (error.request) {\r\n//         // La solicitud se realizó pero no se recibió respuesta\r\n//         errorMessage = 'No se recibió respuesta del servidor';\r\n//       }\r\n      \r\n//       showNotification(errorMessage, 'error');\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"email-form-container\">\r\n//       <h2>Nuevo correo</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"form-group\">\r\n//           <label htmlFor=\"from\">Remitente:</label>\r\n//           <input\r\n//             type=\"email\"\r\n//             id=\"from\"\r\n//             name=\"from\"\r\n//             value={formData.from}\r\n//             onChange={handleChange}\r\n//             placeholder=\"tu@correo.com\"\r\n//           />\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//           <label htmlFor=\"to\">Destinatario:</label>\r\n//           <input\r\n//             type=\"email\"\r\n//             id=\"to\"\r\n//             name=\"to\"\r\n//             value={formData.to}\r\n//             onChange={handleChange}\r\n//             placeholder=\"correo@ejemplo.com\"\r\n//           />\r\n//         </div>\r\n        \r\n//         <div className=\"form-group\">\r\n//           <label htmlFor=\"subject\">Asunto:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"subject\"\r\n//             name=\"subject\"\r\n//             value={formData.subject}\r\n//             onChange={handleChange}\r\n//             placeholder=\"Asunto del correo\"\r\n//           />\r\n//         </div>\r\n        \r\n//         <div className=\"form-group\">\r\n//           <label htmlFor=\"message\">Mensaje:</label>\r\n//           <textarea\r\n//             id=\"message\"\r\n//             name=\"message\"\r\n//             value={formData.message}\r\n//             onChange={handleChange}\r\n//             placeholder=\"Escribe tu mensaje aquí\"\r\n//             rows=\"6\"\r\n//           />\r\n//         </div>\r\n        \r\n//         <button \r\n//           type=\"submit\" \r\n//           className=\"send-button\" \r\n//           disabled={loading}\r\n//         >\r\n//           {loading ? 'Enviando...' : 'Enviar correo'}\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmailForm;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}